'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

exports.convertToDid = convertToDid;

var _didResolver = require('did-resolver');

var _uportLite = require('uport-lite');

var _uportLite2 = _interopRequireDefault(_uportLite);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function convertToDid(did, legacy) {
  var publicKey = [{
    id: did + '#keys-1',
    type: 'EcdsaPublicKeySecp256k1',
    owner: did,
    publicKeyHex: legacy.publicKey.slice(2)
  }];
  if (legacy.publicEncKey) {
    publicKey.push({
      id: did + '#keys-2',
      type: 'Curve25519EncryptionPublicKey',
      owner: did,
      publicKeyBase64: legacy.publicEncKey
    });
  }
  var doc = {
    '@context': 'https://w3id.org/did/v1',
    id: did,
    publicKey: publicKey
  };
  if (legacy.name || legacy.description || legacy.image) {
    var profile = (0, _assign2.default)({}, legacy);
    delete profile['publicKey'];
    delete profile['publicEncKey'];
    doc.uportProfile = profile;
  }
  return doc;
}

function register(configured) {
  var cpsRegistry = configured || (0, _uportLite2.default)();

  var registry = function registry(mnid) {
    return new _promise2.default(function (resolve, reject) {
      cpsRegistry(mnid, function (error, doc) {
        return error ? reject(error) : resolve(doc);
      });
    });
  };

  function resolve(did, parsed) {
    return new _promise2.default(function (resolve, reject) {
      registry(parsed.id).then(function (doc) {
        if (!doc) return resolve();
        // Check if real DID document or legacy
        if (doc['@context'] === 'https://w3id.org/did/v1') return resolve(doc);
        if (typeof doc['publicKey'] === 'string') {
          return resolve(convertToDid(did, doc));
        }
      }, reject);
    });
  }

  (0, _didResolver.registerMethod)('uport', resolve);
}

module.exports = register;