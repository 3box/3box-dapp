'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

exports.registerMethod = registerMethod;
exports.parse = parse;
exports.resolve = resolve;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var REGISTRY = {};

function registerMethod(method, resolver) {
  REGISTRY[method] = resolver;
}

function parse(did) {
  if (!did || did === '') throw new Error('Missing DID');
  var sections = did.match(/^did:([a-zA-Z0-9]+):([[a-zA-Z0-9.-]+)(\/[^#]*)?(#.*)?$/);
  if (sections) {
    var parts = { did: sections[0], method: sections[1], id: sections[2] };
    if (sections[3]) parts.path = sections[3];
    if (sections[4]) parts.fragment = sections[4].slice(1);
    return parts;
  }
  throw new Error('Invalid DID ' + did);
}

function resolve(did) {
  return new _promise2.default(function (resolve, reject) {
    var parsed = parse(did);
    var resolver = REGISTRY[parsed.method];
    if (resolver) {
      return resolver(did, parsed).then(resolve, reject);
    }
    reject(new Error('Unsupported DID method: \'' + parsed.method + '\''));
  });
}

exports.default = resolve;

resolve.registerMethod = registerMethod;
resolve.parse = parse;
module.exports = resolve;