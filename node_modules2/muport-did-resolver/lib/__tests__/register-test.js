"use strict";

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _didResolver = require("did-resolver");

var _didResolver2 = _interopRequireDefault(_didResolver);

var _register = require("../register");

var _register2 = _interopRequireDefault(_register);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var didDoc1 = { "@context": "https://w3id.org/did/v1", "authentication": [{ "publicKey": "did:muport:QmRhjfL4HLdB8LovGf1o43NJ8QnbfqmpdnTuBvZTewnuBV#signingKey", "type": "Secp256k1SignatureAuthentication2018" }], "id": "did:muport:QmRhjfL4HLdB8LovGf1o43NJ8QnbfqmpdnTuBvZTewnuBV", "muportData": { "symEncryptedData": {} }, "publicKey": [{ "id": "did:muport:QmRhjfL4HLdB8LovGf1o43NJ8QnbfqmpdnTuBvZTewnuBV#signingKey", "owner": "did:muport:QmRhjfL4HLdB8LovGf1o43NJ8QnbfqmpdnTuBvZTewnuBV", "publicKeyHex": "02756bca1edf0d0e263851b95e7963b4721d82c2e84c9d7f8a380f899dff8f721c", "type": "Secp256k1VerificationKey2018" }, { "id": "did:muport:QmRhjfL4HLdB8LovGf1o43NJ8QnbfqmpdnTuBvZTewnuBV#managementKey", "owner": "did:muport:QmRhjfL4HLdB8LovGf1o43NJ8QnbfqmpdnTuBvZTewnuBV", "publicKeyHex": "0214ca1c21dfa6bb2550a8559e83817ebd82cfbb8dbda56757f4c0517dde9c52ff", "type": "Secp256k1VerificationKey2018" }, { "id": "did:muport:QmRhjfL4HLdB8LovGf1o43NJ8QnbfqmpdnTuBvZTewnuBV#encryptionKey", "owner": "did:muport:QmRhjfL4HLdB8LovGf1o43NJ8QnbfqmpdnTuBvZTewnuBV", "publicKeyBase64": "uYGr6nD/c/2hQ3hNFrWUWAdlNoelPqduYyyafrALf2U=", "type": "Curve25519EncryptionPublicKey" }], "uportProfile": { "name": "lala" } };
var didDoc2 = { "@context": "https://w3id.org/did/v1", "authentication": [{ "publicKey": "did:muport:QmRhjfL4HLdB8LovGf1o43NJ8QnbfqmpdnTuBvZTewnuBV#signingKey", "type": "Secp256k1SignatureAuthentication2018" }], "id": "did:muport:QmRhjfL4HLdB8LovGf1o43NJ8QnbfqmpdnTuBvZTewnuBV", "muportData": { "symEncryptedData": {} }, "publicKey": [{ "id": "did:muport:QmRhjfL4HLdB8LovGf1o43NJ8QnbfqmpdnTuBvZTewnuBV#signingKey", "owner": "did:muport:QmRhjfL4HLdB8LovGf1o43NJ8QnbfqmpdnTuBvZTewnuBV", "publicKeyHex": "027587672345787832457234587973b4721d82c2e84c9d7f8a380f899dff8f721c", "type": "Secp256k1VerificationKey2018" }, { "id": "did:muport:QmRhjfL4HLdB8LovGf1o43NJ8QnbfqmpdnTuBvZTewnuBV#managementKey", "owner": "did:muport:QmRhjfL4HLdB8LovGf1o43NJ8QnbfqmpdnTuBvZTewnuBV", "publicKeyHex": "098772359877345987733459987873459898772340bda56757f4c0517dde9c52ff", "type": "Secp256k1VerificationKey2018" }, { "id": "did:muport:QmRhjfL4HLdB8LovGf1o43NJ8QnbfqmpdnTuBvZTewnuBV#encryptionKey", "owner": "did:muport:QmRhjfL4HLdB8LovGf1o43NJ8QnbfqmpdnTuBvZTewnuBV", "publicKeyBase64": "uYGr6nD/c/29834589834AdlNoelPqduYyyafrALf2U=", "type": "Curve25519EncryptionPublicKey" }], "uportProfile": { "name": "blub" } };

jest.mock('../lookup', function () {
  var muportDoc1 = { "version": 1, "signingKey": "02756bca1edf0d0e263851b95e7963b4721d82c2e84c9d7f8a380f899dff8f721c", "managementKey": "0214ca1c21dfa6bb2550a8559e83817ebd82cfbb8dbda56757f4c0517dde9c52ff", "asymEncryptionKey": "uYGr6nD/c/2hQ3hNFrWUWAdlNoelPqduYyyafrALf2U=", "publicProfile": { "name": "lala" }, "symEncryptedData": {} };
  var muportDoc2 = { "version": 1, "signingKey": "027587672345787832457234587973b4721d82c2e84c9d7f8a380f899dff8f721c", "managementKey": "098772359877345987733459987873459898772340bda56757f4c0517dde9c52ff", "asymEncryptionKey": "uYGr6nD/c/29834589834AdlNoelPqduYyyafrALf2U=", "publicProfile": { "name": "blub" }, "symEncryptedData": {} };
  var called = false;
  return {
    ethrLookup: function ethrLookup() {
      if (called) {
        return 'QmZZBBKPS2NWc6PMZbUk9zUHCo1SHKzQPPX4ndfwaYzmP1';
      } else {
        called = true;
        return null;
      }
    },
    ipfsLookup: function ipfsLookup(hash) {
      if (hash === 'QmRhjfL4HLdB8LovGf1o43NJ8QnbfqmpdnTuBvZTewnuBV') {
        return muportDoc1;
      } else if (hash === 'QmZZBBKPS2NWc6PMZbUk9zUHCo1SHKzQPPX4ndfwaYzmP1') {
        return muportDoc2;
      } else {
        throw new Error('Error: blablabla');
      }
    }
  };
});


describe('ÂµPortResolver', function () {
  describe('resolve', function () {

    describe('valid DID docs', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
      return _regenerator2.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              it('resolves document', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                return _regenerator2.default.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        (0, _register2.default)();
                        _context.next = 3;
                        return expect((0, _didResolver2.default)('did:muport:QmRhjfL4HLdB8LovGf1o43NJ8QnbfqmpdnTuBvZTewnuBV')).resolves.toEqual(didDoc1);

                      case 3:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee, undefined);
              })));

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, undefined);
    })));

    describe('error handling', function () {
      it('rejects promise', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                (0, _register2.default)();
                _context3.next = 3;
                return expect((0, _didResolver2.default)('did:muport:tmaZBBKPS2NWc6PMZbUk9zUHCo1SHKzQPPX4ndfwaYzmxs')).rejects.toThrow('Invalid muport did');

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, undefined);
      })));
    });

    describe('registry lookup', function () {
      it('looks up hash from registry', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                (0, _register2.default)();
                _context4.next = 3;
                return expect((0, _didResolver2.default)('did:muport:QmRhjfL4HLdB8LovGf1o43NJ8QnbfqmpdnTuBvZTewnuBV')).resolves.toEqual(didDoc2);

              case 3:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, undefined);
      })));
    });
  });
});