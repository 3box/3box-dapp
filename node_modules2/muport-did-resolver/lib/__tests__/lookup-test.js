'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ganache = require('ganache-cli');
var bs58 = require('bs58');
var EthrDIDRegistryAbi = require('ethr-did-registry').abi;
var Web3 = require('web3');
var promisifyAll = require('bluebird').promisifyAll;

var _require = require('../lookup.js'),
    ethLookup = _require.ethLookup,
    ethrLookup = _require.ethrLookup;

var TEST_HASH_1 = 'QmZZBBKPS2NWc6PMZbUk9zUHCo1SHKzQPPX4ndfwaYzmP1';
var TEST_HASH_2 = 'QmZZBBKPS2NWc6PMZbUk9zUHCo1SHKzQPPX4ndfwaYzmP2';
var TEST_HASH_3 = 'QmZZBBKPS2NWc6PMZbUk9zUHCo1SHKzQPPX4ndfwaYzmP3';
var RPC_PROV_URL = 'http://localhost:8555';
var CLAIM_KEY = '0x' + Buffer.from('muPortDocument', 'utf8').toString('hex');
var WRONG_KEY = '0x' + Buffer.from('wrongKey', 'utf8').toString('hex');
var KP = {
  secret: '0x9319b830b14712bd4ab7ede3cef7bfe7f752c5ed8cf66d099a5a14e895c6dceb',
  public: '0291888f1c8cff90aea41cf97dc9b015f2185983524a5e6df888401565239d4d8a',
  address: '0xC94629D67851E1CA43961c3B17964Db3e0b02FFB'
};
var deployData = require('../../src/__tests__/deployData.json');

describe('MuPort', function () {

  var recoveredId4 = void 0;
  var server = void 0;
  var web3 = void 0;
  var accounts = void 0;
  var ethrRegistry = void 0;

  beforeAll((0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            server = promisifyAll(ganache.server({ accounts: [{ secretKey: KP.secret, balance: '0x9999999999999999999999999' }] }));
            _context.next = 3;
            return server.listenAsync(8555);

          case 3:
            web3 = new Web3(server.provider);
            _context.next = 6;
            return deploy(deployData.EthereumDIDRegistry);

          case 6:
            ethrRegistry = new web3.eth.Contract(EthrDIDRegistryAbi, deployData.EthereumDIDRegistry.contractAddress);

          case 7:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  })));

  it('should return null if no updates', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
    var hash;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return ethrLookup(KP.public, RPC_PROV_URL);

          case 2:
            hash = _context2.sent;

            expect(hash).toEqual(null);
            _context2.next = 6;
            return ethrLookup(KP.address, RPC_PROV_URL);

          case 6:
            hash = _context2.sent;

            expect(hash).toEqual(null);

          case 8:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  })));

  it('should return null if events are published with the wrong key', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
    var encHash, hash;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            encHash = encodeIpfsHash(TEST_HASH_1);
            _context3.next = 3;
            return ethrRegistry.methods.setAttribute(KP.address, WRONG_KEY, encHash, 0).send({ from: KP.address });

          case 3:
            _context3.next = 5;
            return ethrLookup(KP.public, RPC_PROV_URL);

          case 5:
            hash = _context3.sent;

            expect(hash).toEqual(null);

          case 7:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  })));

  it('should return an ipfs hash from ethr-did-registry correctly', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {
    var encHash, hash;
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            encHash = encodeIpfsHash(TEST_HASH_1);
            _context4.next = 3;
            return ethrRegistry.methods.setAttribute(KP.address, CLAIM_KEY, encHash, 0).send({ from: KP.address });

          case 3:
            _context4.next = 5;
            return ethrLookup(KP.public, RPC_PROV_URL);

          case 5:
            hash = _context4.sent;

            expect(hash).toEqual(TEST_HASH_1);
            _context4.next = 9;
            return ethrLookup(KP.address, RPC_PROV_URL);

          case 9:
            hash = _context4.sent;

            expect(hash).toEqual(TEST_HASH_1);

          case 11:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, undefined);
  })));

  it('should return an new ipfs hash when updated', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5() {
    var encHash, hash;
    return _regenerator2.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            encHash = encodeIpfsHash(TEST_HASH_2);
            _context5.next = 3;
            return ethrRegistry.methods.setAttribute(KP.address, CLAIM_KEY, encHash, 0).send({ from: KP.address });

          case 3:
            _context5.next = 5;
            return ethrLookup(KP.public, RPC_PROV_URL);

          case 5:
            hash = _context5.sent;

            expect(hash).toEqual(TEST_HASH_2);
            _context5.next = 9;
            return ethrLookup(KP.address, RPC_PROV_URL);

          case 9:
            hash = _context5.sent;

            expect(hash).toEqual(TEST_HASH_2);

          case 11:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, undefined);
  })));

  it('should return the old ipfs hash when event published with worng key', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6() {
    var encHash, hash;
    return _regenerator2.default.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            encHash = encodeIpfsHash(TEST_HASH_3);
            _context6.next = 3;
            return ethrRegistry.methods.setAttribute(KP.address, WRONG_KEY, encHash, 0).send({ from: KP.address });

          case 3:
            _context6.next = 5;
            return ethrLookup(KP.public, RPC_PROV_URL);

          case 5:
            hash = _context6.sent;

            expect(hash).toEqual(TEST_HASH_2);
            _context6.next = 9;
            return ethrLookup(KP.address, RPC_PROV_URL);

          case 9:
            hash = _context6.sent;

            expect(hash).toEqual(TEST_HASH_2);

          case 11:
          case 'end':
            return _context6.stop();
        }
      }
    }, _callee6, undefined);
  })));

  afterAll(function () {
    server.close();
  });

  var deploy = function () {
    var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7(deployData) {
      return _regenerator2.default.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return web3.eth.sendTransaction({ from: KP.address, to: deployData.senderAddress, value: web3.utils.toWei(deployData.costInEther, 'ether') });

            case 2:
              _context7.next = 4;
              return web3.eth.sendSignedTransaction(deployData.rawTx);

            case 4:
            case 'end':
              return _context7.stop();
          }
        }
      }, _callee7, undefined);
    }));

    return function deploy(_x) {
      return _ref7.apply(this, arguments);
    };
  }();
});

var encodeIpfsHash = function encodeIpfsHash(hash) {
  return '0x' + bs58.decode(hash).toString('hex');
};