'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var ipfsLookup = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(hash, conf) {
    var url;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            conf = conf || IPFS_CONF;
            url = conf.protocol + '://' + conf.host + '/ipfs/' + hash;
            return _context.abrupt('return', request(url));

          case 3:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function ipfsLookup(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var ethrLookup = function () {
  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(managementKey) {
    var rpcUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PROVIDER_URL;
    var eth, logDecoder, address, hexHash, previousChange, event;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            eth = new _ethjsQuery2.default(new _ethjsProviderHttp2.default(rpcUrl));
            logDecoder = _ethjsAbi2.default.logDecoder(_ethrDidRegistry2.default.abi, false);
            address = managementKey.length === 42 ? managementKey.slice(2).toLowerCase() : toEthereumAddress(managementKey);
            hexHash = void 0;
            _context2.next = 6;
            return lastChange(address, rpcUrl);

          case 6:
            previousChange = _context2.sent;

          case 7:
            if (!previousChange) {
              _context2.next = 19;
              break;
            }

            _context2.t0 = logDecoder;
            _context2.next = 11;
            return eth.getLogs({
              address: _ethrDidRegistry2.default.networks[1].address,
              topics: [ATTRIBUTE_CHANGED_FILTER, '0x000000000000000000000000' + address],
              fromBlock: previousChange,
              toBlock: previousChange
            });

          case 11:
            _context2.t1 = _context2.sent;
            event = (0, _context2.t0)(_context2.t1)[0];

            previousChange = event.previousChange.isZero() ? null : event.previousChange;

            if (!event.name.startsWith(CLAIM_KEY)) {
              _context2.next = 17;
              break;
            }

            hexHash = event.value;
            return _context2.abrupt('break', 19);

          case 17:
            _context2.next = 7;
            break;

          case 19:
            return _context2.abrupt('return', hexHash ? hexToIpfsHash(hexHash) : null);

          case 20:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function ethrLookup(_x4) {
    return _ref2.apply(this, arguments);
  };
}();

var lastChange = function () {
  var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(address) {
    var rpcUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PROVIDER_URL;
    var methodAbi, callData, lastChanged;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            address = '0x' + address;
            methodAbi = _ethrDidRegistry2.default.abi.filter(function (x) {
              return x.name === "changed";
            })[0];
            callData = _ethjsAbi2.default.encodeMethod(methodAbi, [address]);
            _context3.next = 5;
            return request(rpcUrl, (0, _stringify2.default)({
              method: 'eth_call',
              params: [{
                to: _ethrDidRegistry2.default.networks[1].address,
                data: callData
              }, 'latest'],
              id: 1,
              jsonrpc: '2.0'
            }));

          case 5:
            lastChanged = _context3.sent.result;
            return _context3.abrupt('return', lastChanged !== ZERO_HEX ? lastChanged : null);

          case 7:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function lastChange(_x6) {
    return _ref3.apply(this, arguments);
  };
}();

var _bs = require('bs58');

var _bs2 = _interopRequireDefault(_bs);

var _elliptic = require('elliptic');

var _jsSha = require('js-sha3');

var _ethrDidRegistry = require('ethr-did-registry');

var _ethrDidRegistry2 = _interopRequireDefault(_ethrDidRegistry);

var _ethjsProviderHttp = require('ethjs-provider-http');

var _ethjsProviderHttp2 = _interopRequireDefault(_ethjsProviderHttp);

var _ethjsQuery = require('ethjs-query');

var _ethjsQuery2 = _interopRequireDefault(_ethjsQuery);

var _ethjsAbi = require('ethjs-abi');

var _ethjsAbi2 = _interopRequireDefault(_ethjsAbi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var XMLHttpRequest = typeof window !== 'undefined' ? window.XMLHttpRequest : require('xmlhttprequest').XMLHttpRequest;
var secp256k1 = new _elliptic.ec('secp256k1');

var PROVIDER_URL = 'https://mainnet.infura.io';
var IPFS_CONF = { host: 'ipfs.infura.io', port: 5001, protocol: 'https' };
var ATTRIBUTE_CHANGED_FILTER = '0x18ab6b2ae3d64306c00ce663125f2bd680e441a098de1635bd7ad8b0d44965e4';
var ZERO_HEX = '0x0000000000000000000000000000000000000000000000000000000000000000';
var CLAIM_KEY = '0x' + Buffer.from('muPortDocument', 'utf8').toString('hex');

var hexToIpfsHash = function hexToIpfsHash(hexHash) {
  return _bs2.default.encode(Buffer.from(hexHash.slice(2), 'hex'));
};

function request(url, payload) {
  var request = new XMLHttpRequest();
  return new _promise2.default(function (resolve, reject) {
    request.onreadystatechange = function () {
      if (request.readyState === 4 && request.timeout !== 1) {
        if (request.status !== 200) {
          reject('[muport-did-resolver] status ' + request.status + ': ' + request.responseText);
        } else {
          try {
            resolve(JSON.parse(request.responseText));
          } catch (jsonError) {
            reject('[muport-did-resolver] while parsing data: \'' + String(request.responseText) + '\', error: ' + String(jsonError));
          }
        }
      }
    };
    if (payload) {
      request.open('POST', url);
      request.setRequestHeader('Content-Type', 'application/json');
    } else {
      request.open('GET', url);
    }
    request.setRequestHeader('accept', 'application/json');
    request.send(payload);
  });
}

var keccak = function keccak(data) {
  return Buffer.from(_jsSha.keccak_256.buffer(data));
};
var decompressPubKey = function decompressPubKey(key) {
  return secp256k1.keyFromPublic(key, 'hex').pub.encode('hex');
};
var toEthereumAddress = function toEthereumAddress(pubkey) {
  return keccak(Buffer.from(decompressPubKey(pubkey).slice(2), 'hex')).slice(-20).toString('hex');
};

module.exports = { ethrLookup: ethrLookup, ipfsLookup: ipfsLookup };