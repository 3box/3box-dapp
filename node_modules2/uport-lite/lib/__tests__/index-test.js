'use strict';

var _index = require('../index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var registry = (0, _index2.default)({
  networks: {
    '0x94365e3b': {
      registry: '0x41566e3a081f5032bdcad470adb797635ddfe1f0',
      rpcUrl: 'https://ropsten.infura.io'
    }
  }
});

// uPortProfileIPFS1220 => 75506f727450726f66696c654950465331323230
//"uPortProfileIPFS1220","0x39F79c6511940bB54Ca69a659c929DdD5a4c679F","0x39F79c6511940bB54Ca69a659c929DdD5a4c679F"

it('finds valid default profile for address', function () {
  return new Promise(function (resolve, reject) {
    registry('2oVdmcz7BkWozm2JE4hHixRV8s5y3STqhPG', function (error, profile) {
      if (error) return reject(error);
      resolve(profile);
    });
  }).then(function (profile) {
    return expect(profile.publicKey).toEqual('0x0482780d59037778ea03c7d5169dd7cf47a835cb6d57a606b4e6cf98000a28d20d6d6bfae223cc76fd2f63d8a382a1c054788c4fafb1062ee89e718b96e0896d40');
  });
});

it('finds valid default profile for address on kovan', function () {
  return new Promise(function (resolve, reject) {
    registry('3511FZbtXjJbTHYz3NnLAXZwjgFVQq3tCfH', function (error, profile) {
      if (error) return reject(error);
      resolve(profile);
    });
  }).then(function (profile) {
    return expect(profile.publicKey).toEqual('0x0466aa9f309dfb7624ae3b0a6b6ad6163145d977e088679252289816b90b2e5e9d58ea42a4b79f255731660d0c3e319a4fa54a6f1a73a88fd3c1b48a084269ab48');
  });
});

it('finds valid default profile on private chain', function () {
  return new Promise(function (resolve, reject) {

    registry('5A8bRX9ShMLm7bXPn9SVX6hC7SG1HURF3tknToB', function (error, profile) {
      if (error) return reject(error);
      resolve(profile);
    });
  }).then(function (profile) {
    return expect(profile.publicKey).toEqual('0x0482780d59037778ea03c7d5169dd7cf47a835cb6d57a606b4e6cf98000a28d20d6d6bfae223cc76fd2f63d8a382a1c054788c4fafb1062ee89e718b96e0896d40');
  });
});

it('finds valid advanced profile using new API', function () {
  return new Promise(function (resolve, reject) {

    registry('2oVdmcz7BkWozm2JE4hHixRV8s5y3STqhPG', function (error, profile) {
      if (error) return reject(error);
      resolve(profile);
    }, '2oVdmcz7BkWozm2JE4hHixRV8s5y3STqhPG', 'uPortProfileIPFS1220');
  }).then(function (profile) {
    return expect(profile.publicKey).toEqual('0x0482780d59037778ea03c7d5169dd7cf47a835cb6d57a606b4e6cf98000a28d20d6d6bfae223cc76fd2f63d8a382a1c054788c4fafb1062ee89e718b96e0896d40');
  });
});

it('returns null if it profile doesnt exist', function () {
  return new Promise(function (resolve, reject) {
    registry('2oJvyeFwEbtLsuJ7G7bcUFPocuEU8AdeHKs', function (error, profile) {
      if (error) return reject(error);
      resolve(profile);
    });
  }).then(function (profile) {
    return expect(profile).toBeUndefined();
  });
});

it('returns error for unsupported network', function () {
  return new Promise(function (resolve, reject) {
    registry('5A8bRWU3F7j3REx3vkJWxdjQPp4tqmxFPmab1Tr', function (error, profile) {
      if (error) return reject(error);
      resolve(profile);
    });
  }).catch(function (error) {
    return expect(error.message).toBe('Network id 0x94365e3a is not configured');
  });
});

it('returns error if issuer and subject are on different networks', function () {
  return new Promise(function (resolve, reject) {
    registry('2oVdmcz7BkWozm2JE4hHixRV8s5y3STqhPG', function (error, profile) {
      if (error) return reject(error);
      resolve(profile);
    }, '2nQtiQG6Cgm1GYTBaaKAgr76uY7iSexUkqX', 'uPortProfileIPFS1220');
  }).catch(function (error) {
    return expect(error.message).toBe('Issuer and subject must be on the same network');
  });
});

describe('legacy registry', function () {
  it('finds valid profile', function () {
    return new Promise(function (resolve, reject) {
      registry('0x3b2631d8e15b145fd2bf99fc5f98346aecdc394c', function (error, profile) {
        if (error) return reject(error);
        resolve(profile);
      });
    }).then(function (profile) {
      return expect(profile.publicKey).toEqual('0x0482780d59037778ea03c7d5169dd7cf47a835cb6d57a606b4e6cf98000a28d20d6d6bfae223cc76fd2f63d8a382a1c054788c4fafb1062ee89e718b96e0896d40');
    });
  });

  it('returns null if it profile doesnt exist', function () {
    return new Promise(function (resolve, reject) {
      registry('0x3b2631d8e15b145fd2bf99fc5f98346aecdc394d', function (error, profile) {
        if (error) return reject(error);
        resolve(profile);
      });
    }).then(function (profile) {
      return expect(profile).toBeUndefined();
    });
  });
});