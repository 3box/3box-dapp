'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _SignerAlgorithm = require('../SignerAlgorithm');

var _SignerAlgorithm2 = _interopRequireDefault(_SignerAlgorithm);

var _VerifierAlgorithm = require('../VerifierAlgorithm');

var _SimpleSigner = require('../SimpleSigner');

var _SimpleSigner2 = _interopRequireDefault(_SimpleSigner);

var _base64url = require('base64url');

var _base64url2 = _interopRequireDefault(_base64url);

var _elliptic = require('elliptic');

var _Digest = require('../Digest');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var secp256k1 = new _elliptic.ec('secp256k1');
var privateKey = '278a5de700e29faae8e40e366ec5012b5ec63d36ec77e8a241154cc1d25383f';
var kp = secp256k1.keyFromPrivate(privateKey);
var signer = (0, _SimpleSigner2.default)(privateKey);

describe('SignerAlgorithm', function () {
  it('supports ES256K', function () {
    expect((0, _typeof3.default)((0, _SignerAlgorithm2.default)('ES256K'))).toEqual('function');
  });

  it('supports ES256K-R', function () {
    expect((0, _typeof3.default)((0, _SignerAlgorithm2.default)('ES256K-R'))).toEqual('function');
  });

  it('fails on unsupported algorithm', function () {
    expect(function () {
      return (0, _SignerAlgorithm2.default)('BADALGO');
    }).toThrowError('Unsupported algorithm BADALGO');
  });
});

describe('ES256K', function () {
  var jwtSigner = (0, _SignerAlgorithm2.default)('ES256K');
  it('returns correct signature', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt('return', expect(jwtSigner('hello', signer)).resolves.toEqual('MaCPcIypS76TnvKSbhbPMG01BJvjQ6ouITV-mVt7_bfTZfGkEdwooSqbzPBHAlZXGzYYvrTnH4M9lF3OZMdpRQ'));

          case 1:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  })));

  it('returns signature of 64 bytes', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
    var signature;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return jwtSigner('hello', signer);

          case 2:
            signature = _context2.sent;

            expect(_base64url2.default.toBuffer(signature).length).toEqual(64);

          case 4:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  })));

  it('contains only r and s of signature', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
    var signature;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return jwtSigner('hello', signer);

          case 2:
            signature = _context3.sent;

            expect((0, _VerifierAlgorithm.toSignatureObject)(signature)).toEqual({ r: '31a08f708ca94bbe939ef2926e16cf306d35049be343aa2e21357e995b7bfdb7', s: 'd365f1a411dc28a12a9bccf0470256571b3618beb4e71f833d945dce64c76945' });

          case 4:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  })));

  it('can verify the signature', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {
    var signature;
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return jwtSigner('hello', signer);

          case 2:
            signature = _context4.sent;

            expect(kp.verify((0, _Digest.sha256)('hello'), (0, _VerifierAlgorithm.toSignatureObject)(signature))).toBeTruthy();

          case 4:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, undefined);
  })));
});

describe('ES256K-R', function () {
  var jwtSigner = (0, _SignerAlgorithm2.default)('ES256K-R');
  it('returns correct signature', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5() {
    return _regenerator2.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            return _context5.abrupt('return', expect(jwtSigner('hello', signer)).resolves.toEqual('MaCPcIypS76TnvKSbhbPMG01BJvjQ6ouITV-mVt7_bfTZfGkEdwooSqbzPBHAlZXGzYYvrTnH4M9lF3OZMdpRQE'));

          case 1:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, undefined);
  })));

  it('returns signature of 64 bytes', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6() {
    var signature;
    return _regenerator2.default.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return jwtSigner('hello', signer);

          case 2:
            signature = _context6.sent;

            expect(_base64url2.default.toBuffer(signature).length).toEqual(65);

          case 4:
          case 'end':
            return _context6.stop();
        }
      }
    }, _callee6, undefined);
  })));

  it('contains r, s and recoveryParam of signature', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7() {
    var signature;
    return _regenerator2.default.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return jwtSigner('hello', signer);

          case 2:
            signature = _context7.sent;

            expect((0, _VerifierAlgorithm.toSignatureObject)(signature, true)).toEqual({ r: '31a08f708ca94bbe939ef2926e16cf306d35049be343aa2e21357e995b7bfdb7', s: 'd365f1a411dc28a12a9bccf0470256571b3618beb4e71f833d945dce64c76945', recoveryParam: 1 });

          case 4:
          case 'end':
            return _context7.stop();
        }
      }
    }, _callee7, undefined);
  })));

  it('can verify the signature', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8() {
    var signature;
    return _regenerator2.default.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _context8.next = 2;
            return jwtSigner('hello', signer);

          case 2:
            signature = _context8.sent;

            expect(kp.verify((0, _Digest.sha256)('hello'), (0, _VerifierAlgorithm.toSignatureObject)(signature, true))).toBeTruthy();

          case 4:
          case 'end':
            return _context8.stop();
        }
      }
    }, _callee8, undefined);
  })));
});