'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

exports.ES256KSigner = ES256KSigner;

var _elliptic = require('elliptic');

var _jsSha = require('js-sha256');

var _base64url = require('base64url');

var _base64url2 = _interopRequireDefault(_base64url);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ES256KSigner() {
  var secp256k1 = new _elliptic.ec('secp256k1');

  function hash(payload) {
    return Buffer.from(_jsSha.sha256.arrayBuffer(payload));
  }

  function toJose(signature) {
    var jose = Buffer.alloc(64);
    Buffer.from(signature.r, 'hex').copy(jose, 0);
    Buffer.from(signature.s, 'hex').copy(jose, 32);
    return _base64url2.default.encode(jose);
  }

  return function () {
    var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(payload, signer) {
      var signature;
      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return signer(hash(payload));

            case 2:
              signature = _context.sent;
              return _context.abrupt('return', toJose(signature));

            case 4:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function sign(_x, _x2) {
      return _ref.apply(this, arguments);
    }

    return sign;
  }();
}

var algorithms = { ES256K: ES256KSigner() };

function Signer(alg) {
  var impl = algorithms[alg];
  if (!impl) throw new Error('Unsupported algorithm ' + alg);
  return impl;
}

module.exports = Signer;