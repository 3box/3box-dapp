'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _elliptic = require('elliptic');

var _Digest = require('./Digest');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var secp256k1 = new _elliptic.ec('secp256k1');

function leftpad(data) {
  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 64;

  if (data.length === size) return data;
  return '0'.repeat(size - data.length) + data;
}
/**
*  The SimpleSigner returns a configured function for signing data. It also defines
*  an interface that you can also implement yourself and use in our other modules.
*
*  @example
*  const signer = SimpleSigner(process.env.PRIVATE_KEY)
*  signer(data, (err, signature) => {
*    ...
*  })
*
*  @param    {String}         hexPrivateKey    a hex encoded private key
*  @return   {Function}                     a configured signer function
*/

function SimpleSigner(hexPrivateKey) {
  var _this = this;

  var privateKey = secp256k1.keyFromPrivate(hexPrivateKey);
  return function () {
    var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(data) {
      var _privateKey$sign, r, s, recoveryParam;

      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _privateKey$sign = privateKey.sign((0, _Digest.sha256)(data)), r = _privateKey$sign.r, s = _privateKey$sign.s, recoveryParam = _privateKey$sign.recoveryParam;
              return _context.abrupt('return', {
                r: leftpad(r.toString('hex')),
                s: leftpad(s.toString('hex')),
                recoveryParam: recoveryParam
              });

            case 2:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, _this);
    }));

    return function (_x2) {
      return _ref.apply(this, arguments);
    };
  }();
}

module.exports = SimpleSigner;