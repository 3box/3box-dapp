import {createRequestTypes, action} from '../utils'
export const actions = {
WEB3_SET_PROVIDER: createRequestTypes('WEB3_SET_PROVIDER'),

ETH_SET_PROVIDER: createRequestTypes('ETH_SET_PROVIDER'),
 ETH_GET_PROTOCOL_VERSION: createRequestTypes('ETH_GET_PROTOCOL_VERSION'),
 ETH_IS_SYNCING: createRequestTypes('ETH_IS_SYNCING'),
 ETH_GET_COINBASE: createRequestTypes('ETH_GET_COINBASE'),
 ETH_IS_MINING: createRequestTypes('ETH_IS_MINING'),
 ETH_GET_HASHRATE: createRequestTypes('ETH_GET_HASHRATE'),
 ETH_GET_GAS_PRICE: createRequestTypes('ETH_GET_GAS_PRICE'),
 ETH_GET_ACCOUNTS: createRequestTypes('ETH_GET_ACCOUNTS'),
 ETH_GET_BLOCK_NUMBER: createRequestTypes('ETH_GET_BLOCK_NUMBER'),
 ETH_GET_BALANCE: createRequestTypes('ETH_GET_BALANCE'),
 ETH_GET_STORAGE_AT: createRequestTypes('ETH_GET_STORAGE_AT'),
 ETH_GET_CODE: createRequestTypes('ETH_GET_CODE'),
 ETH_GET_BLOCK: createRequestTypes('ETH_GET_BLOCK'),
 ETH_GET_BLOCK_TRANSACTION_COUNT: createRequestTypes('ETH_GET_BLOCK_TRANSACTION_COUNT'),
 ETH_GET_UNCLE: createRequestTypes('ETH_GET_UNCLE'),
 ETH_GET_TRANSACTION: createRequestTypes('ETH_GET_TRANSACTION'),
 ETH_GET_TRANSACTION_FROM_BLOCK: createRequestTypes('ETH_GET_TRANSACTION_FROM_BLOCK'),
 ETH_GET_TRANSACTION_RECEIPT: createRequestTypes('ETH_GET_TRANSACTION_RECEIPT'),
 ETH_GET_TRANSACTION_COUNT: createRequestTypes('ETH_GET_TRANSACTION_COUNT'),
 ETH_SEND_TRANSACTION: createRequestTypes('ETH_SEND_TRANSACTION'),
 ETH_SEND_SIGNED_TRANSACTION: createRequestTypes('ETH_SEND_SIGNED_TRANSACTION'),
 ETH_SIGN: createRequestTypes('ETH_SIGN'),
 ETH_SIGN_TRANSACTION: createRequestTypes('ETH_SIGN_TRANSACTION'),
 ETH_ESTIMATE_GAS: createRequestTypes('ETH_ESTIMATE_GAS'),
 ETH_GET_PAST_LOGS: createRequestTypes('ETH_GET_PAST_LOGS'),
 ETH_GET_COMPILERS: createRequestTypes('ETH_GET_COMPILERS'),
 ETH_GET_WORK: createRequestTypes('ETH_GET_WORK'),
 ETH_SUBMIT_WORK: createRequestTypes('ETH_SUBMIT_WORK'),
 ETH_SUBSCRIBE: createRequestTypes('ETH_SUBSCRIBE'),
 ETH_CLEAR_SUBSCRIPTIONS: createRequestTypes('ETH_CLEAR_SUBSCRIPTIONS'),

ETH_CONTRACT_CREATE: createRequestTypes('ETH_CONTRACT_CREATE'),
 ETH_CONTRACT_CLONE: createRequestTypes('ETH_CONTRACT_CLONE'),
 ETH_CONTRACT_DEPLOY: createRequestTypes('ETH_CONTRACT_DEPLOY'),
 ETH_CONTRACT_CALL: createRequestTypes('ETH_CONTRACT_CALL'),
 ETH_CONTRACT_SEND: createRequestTypes('ETH_CONTRACT_SEND'),
 ETH_CONTRACT_ESTIMATE_GAS: createRequestTypes('ETH_CONTRACT_ESTIMATE_GAS'),
 ETH_CONTRACT_ENCODE_ABI: createRequestTypes('ETH_CONTRACT_ENCODE_ABI'),
 ETH_CONTRACT_GET_PAST_EVENTS: createRequestTypes('ETH_CONTRACT_GET_PAST_EVENTS'),

ETH_ACCOUNTS_CREATE: createRequestTypes('ETH_ACCOUNTS_CREATE'),
 ETH_ACCOUNTS_PRIVATE_KEY_TO_ACCOUNT: createRequestTypes('ETH_ACCOUNTS_PRIVATE_KEY_TO_ACCOUNT'),
 ETH_ACCOUNTS_SIGN_TRANSACTION: createRequestTypes('ETH_ACCOUNTS_SIGN_TRANSACTION'),
 ETH_ACCOUNTS_RECOVER_TRANSACTION: createRequestTypes('ETH_ACCOUNTS_RECOVER_TRANSACTION'),
 ETH_ACCOUNTS_HASH_MESSAGE: createRequestTypes('ETH_ACCOUNTS_HASH_MESSAGE'),
 ETH_ACCOUNTS_SIGN: createRequestTypes('ETH_ACCOUNTS_SIGN'),
 ETH_ACCOUNTS_RECOVER: createRequestTypes('ETH_ACCOUNTS_RECOVER'),
 ETH_ACCOUNTS_ENCRYPT: createRequestTypes('ETH_ACCOUNTS_ENCRYPT'),
 ETH_ACCOUNTS_DECRYPT: createRequestTypes('ETH_ACCOUNTS_DECRYPT'),
 ETH_ACCOUNTS_WALLET: createRequestTypes('ETH_ACCOUNTS_WALLET'),
 ETH_ACCOUNTS_WALLET_CREATE: createRequestTypes('ETH_ACCOUNTS_WALLET_CREATE'),
 ETH_ACCOUNTS_WALLET_ADD: createRequestTypes('ETH_ACCOUNTS_WALLET_ADD'),
 ETH_ACCOUNTS_WALLET_REMOVE: createRequestTypes('ETH_ACCOUNTS_WALLET_REMOVE'),
 ETH_ACCOUNTS_WALLET_CLEAR: createRequestTypes('ETH_ACCOUNTS_WALLET_CLEAR'),
 ETH_ACCOUNTS_WALLET_ENCRYPT: createRequestTypes('ETH_ACCOUNTS_WALLET_ENCRYPT'),
 ETH_ACCOUNTS_WALLET_DECRYPT: createRequestTypes('ETH_ACCOUNTS_WALLET_DECRYPT'),
 ETH_ACCOUNTS_WALLET_SAVE: createRequestTypes('ETH_ACCOUNTS_WALLET_SAVE'),
 ETH_ACCOUNTS_WALLET_LOAD: createRequestTypes('ETH_ACCOUNTS_WALLET_LOAD'),

ETH_PERSONAL_SET_PROVIDER: createRequestTypes('ETH_PERSONAL_SET_PROVIDER'),
 ETH_PERSONAL_PROVIDERS: createRequestTypes('ETH_PERSONAL_PROVIDERS'),
 ETH_PERSONAL_GIVEN_PROVIDER: createRequestTypes('ETH_PERSONAL_GIVEN_PROVIDER'),
 ETH_PERSONAL_CURRENT_PROVIDER: createRequestTypes('ETH_PERSONAL_CURRENT_PROVIDER'),
 ETH_PERSONAL_NEW_ACCOUNT: createRequestTypes('ETH_PERSONAL_NEW_ACCOUNT'),
 ETH_PERSONAL_SIGN: createRequestTypes('ETH_PERSONAL_SIGN'),
 ETH_PERSONAL_EC_RECOVER: createRequestTypes('ETH_PERSONAL_EC_RECOVER'),
 ETH_PERSONAL_SIGN_TRANSACTION: createRequestTypes('ETH_PERSONAL_SIGN_TRANSACTION'),

ETH_IBAN_CREATE: createRequestTypes('ETH_IBAN_CREATE'),
 ETH_IBAN_TO_ADDRESS: createRequestTypes('ETH_IBAN_TO_ADDRESS'),
 ETH_IBAN_TO_IBAN: createRequestTypes('ETH_IBAN_TO_IBAN'),
 ETH_IBAN_FROM_ETHEREUM_ADDRESS: createRequestTypes('ETH_IBAN_FROM_ETHEREUM_ADDRESS'),
 ETH_IBAN_FROM_IBAN: createRequestTypes('ETH_IBAN_FROM_IBAN'),
 ETH_IBAN_CREATE_INDIRECT: createRequestTypes('ETH_IBAN_CREATE_INDIRECT'),
 ETH_IBAN_IS_VALID: createRequestTypes('ETH_IBAN_IS_VALID'),
 ETH_IBAN_IS_DIRECT: createRequestTypes('ETH_IBAN_IS_DIRECT'),

ETH_ABI_ENCODE_FUNCTION_SIGNATURE: createRequestTypes('ETH_ABI_ENCODE_FUNCTION_SIGNATURE'),
 ETH_ABI_ENCODE_EVENT_SIGNATURE: createRequestTypes('ETH_ABI_ENCODE_EVENT_SIGNATURE'),
 ETH_ABI_ENCODE_PARAMETER: createRequestTypes('ETH_ABI_ENCODE_PARAMETER'),
 ETH_ABI_ENCODE_FUNCTION_CALL: createRequestTypes('ETH_ABI_ENCODE_FUNCTION_CALL'),
 ETH_ABI_DECODE_PARAMETER: createRequestTypes('ETH_ABI_DECODE_PARAMETER'),
 ETH_ABI_DECODE_PARAMETERS: createRequestTypes('ETH_ABI_DECODE_PARAMETERS'),
 ETH_ABI_DECODE_LOG: createRequestTypes('ETH_ABI_DECODE_LOG'),

NET_GET_ID: createRequestTypes('NET_GET_ID'),
 NET_IS_LISTENING: createRequestTypes('NET_IS_LISTENING'),
 NET_GET_PEER_COUNT: createRequestTypes('NET_GET_PEER_COUNT'),

web3SetProvider: status => (payload, metadata) => action(actions.WEB3_SET_PROVIDER[status], payload, metadata, true),

ethSetProvider: status => (payload, metadata) => action(actions.ETH_SET_PROVIDER[status], payload, metadata, true),
 ethGetProtocolVersion: status => (payload, metadata) => action(actions.ETH_GET_PROTOCOL_VERSION[status], payload, metadata, true),
 ethIsSyncing: status => (payload, metadata) => action(actions.ETH_IS_SYNCING[status], payload, metadata, true),
 ethGetCoinbase: status => (payload, metadata) => action(actions.ETH_GET_COINBASE[status], payload, metadata, true),
 ethIsMining: status => (payload, metadata) => action(actions.ETH_IS_MINING[status], payload, metadata, true),
 ethGetHashrate: status => (payload, metadata) => action(actions.ETH_GET_HASHRATE[status], payload, metadata, true),
 ethGetGasPrice: status => (payload, metadata) => action(actions.ETH_GET_GAS_PRICE[status], payload, metadata, true),
 ethGetAccounts: status => (payload, metadata) => action(actions.ETH_GET_ACCOUNTS[status], payload, metadata, true),
 ethGetBlockNumber: status => (payload, metadata) => action(actions.ETH_GET_BLOCK_NUMBER[status], payload, metadata, true),
 ethGetBalance: status => (payload, metadata) => action(actions.ETH_GET_BALANCE[status], payload, metadata, true),
 ethGetStorageAt: status => (payload, metadata) => action(actions.ETH_GET_STORAGE_AT[status], payload, metadata, true),
 ethGetCode: status => (payload, metadata) => action(actions.ETH_GET_CODE[status], payload, metadata, true),
 ethGetBlock: status => (payload, metadata) => action(actions.ETH_GET_BLOCK[status], payload, metadata, true),
 ethGetBlockTransactionCount: status => (payload, metadata) => action(actions.ETH_GET_BLOCK_TRANSACTION_COUNT[status], payload, metadata, true),
 ethGetUncle: status => (payload, metadata) => action(actions.ETH_GET_UNCLE[status], payload, metadata, true),
 ethGetTransaction: status => (payload, metadata) => action(actions.ETH_GET_TRANSACTION[status], payload, metadata, true),
 ethGetTransactionFromBlock: status => (payload, metadata) => action(actions.ETH_GET_TRANSACTION_FROM_BLOCK[status], payload, metadata, true),
 ethGetTransactionReceipt: status => (payload, metadata) => action(actions.ETH_GET_TRANSACTION_RECEIPT[status], payload, metadata, true),
 ethGetTransactionCount: status => (payload, metadata) => action(actions.ETH_GET_TRANSACTION_COUNT[status], payload, metadata, true),
 ethSendTransaction: status => (payload, metadata) => action(actions.ETH_SEND_TRANSACTION[status], payload, metadata, true),
 ethSendSignedTransaction: status => (payload, metadata) => action(actions.ETH_SEND_SIGNED_TRANSACTION[status], payload, metadata, true),
 ethSign: status => (payload, metadata) => action(actions.ETH_SIGN[status], payload, metadata, true),
 ethSignTransaction: status => (payload, metadata) => action(actions.ETH_SIGN_TRANSACTION[status], payload, metadata, true),
 ethEstimateGas: status => (payload, metadata) => action(actions.ETH_ESTIMATE_GAS[status], payload, metadata, true),
 ethGetPastLogs: status => (payload, metadata) => action(actions.ETH_GET_PAST_LOGS[status], payload, metadata, true),
 ethGetCompilers: status => (payload, metadata) => action(actions.ETH_GET_COMPILERS[status], payload, metadata, true),
 ethGetWork: status => (payload, metadata) => action(actions.ETH_GET_WORK[status], payload, metadata, true),
 ethSubmitWork: status => (payload, metadata) => action(actions.ETH_SUBMIT_WORK[status], payload, metadata, true),
 ethSubscribe: status => (payload, metadata) => action(actions.ETH_SUBSCRIBE[status], payload, metadata, true),
 ethClearSubscriptions: status => (payload, metadata) => action(actions.ETH_CLEAR_SUBSCRIPTIONS[status], payload, metadata, true),

ethContractCreate: status => (payload, metadata) => action(actions.ETH_CONTRACT_CREATE[status], payload, metadata, true),
 ethContractClone: status => (payload, metadata) => action(actions.ETH_CONTRACT_CLONE[status], payload, metadata, true),
 ethContractDeploy: status => (payload, metadata) => action(actions.ETH_CONTRACT_DEPLOY[status], payload, metadata, true),
 ethContractCall: status => (payload, metadata) => action(actions.ETH_CONTRACT_CALL[status], payload, metadata, true),
 ethContractSend: status => (payload, metadata) => action(actions.ETH_CONTRACT_SEND[status], payload, metadata, true),
 ethContractEstimateGas: status => (payload, metadata) => action(actions.ETH_CONTRACT_ESTIMATE_GAS[status], payload, metadata, true),
 ethContractEncodeAbi: status => (payload, metadata) => action(actions.ETH_CONTRACT_ENCODE_ABI[status], payload, metadata, true),
 ethContractGetPastEvents: status => (payload, metadata) => action(actions.ETH_CONTRACT_GET_PAST_EVENTS[status], payload, metadata, true),

ethAccountsCreate: status => (payload, metadata) => action(actions.ETH_ACCOUNTS_CREATE[status], payload, metadata, true),
 ethAccountsPrivateKeyToAccount: status => (payload, metadata) => action(actions.ETH_ACCOUNTS_PRIVATE_KEY_TO_ACCOUNT[status], payload, metadata, true),
 ethAccountsSignTransaction: status => (payload, metadata) => action(actions.ETH_ACCOUNTS_SIGN_TRANSACTION[status], payload, metadata, true),
 ethAccountsRecoverTransaction: status => (payload, metadata) => action(actions.ETH_ACCOUNTS_RECOVER_TRANSACTION[status], payload, metadata, true),
 ethAccountsHashMessage: status => (payload, metadata) => action(actions.ETH_ACCOUNTS_HASH_MESSAGE[status], payload, metadata, true),
 ethAccountsSign: status => (payload, metadata) => action(actions.ETH_ACCOUNTS_SIGN[status], payload, metadata, true),
 ethAccountsRecover: status => (payload, metadata) => action(actions.ETH_ACCOUNTS_RECOVER[status], payload, metadata, true),
 ethAccountsEncrypt: status => (payload, metadata) => action(actions.ETH_ACCOUNTS_ENCRYPT[status], payload, metadata, true),
 ethAccountsDecrypt: status => (payload, metadata) => action(actions.ETH_ACCOUNTS_DECRYPT[status], payload, metadata, true),
 ethAccountsWallet: status => (payload, metadata) => action(actions.ETH_ACCOUNTS_WALLET[status], payload, metadata, true),
 ethAccountsWalletCreate: status => (payload, metadata) => action(actions.ETH_ACCOUNTS_WALLET_CREATE[status], payload, metadata, true),
 ethAccountsWalletAdd: status => (payload, metadata) => action(actions.ETH_ACCOUNTS_WALLET_ADD[status], payload, metadata, true),
 ethAccountsWalletRemove: status => (payload, metadata) => action(actions.ETH_ACCOUNTS_WALLET_REMOVE[status], payload, metadata, true),
 ethAccountsWalletClear: status => (payload, metadata) => action(actions.ETH_ACCOUNTS_WALLET_CLEAR[status], payload, metadata, true),
 ethAccountsWalletEncrypt: status => (payload, metadata) => action(actions.ETH_ACCOUNTS_WALLET_ENCRYPT[status], payload, metadata, true),
 ethAccountsWalletDecrypt: status => (payload, metadata) => action(actions.ETH_ACCOUNTS_WALLET_DECRYPT[status], payload, metadata, true),
 ethAccountsWalletSave: status => (payload, metadata) => action(actions.ETH_ACCOUNTS_WALLET_SAVE[status], payload, metadata, true),
 ethAccountsWalletLoad: status => (payload, metadata) => action(actions.ETH_ACCOUNTS_WALLET_LOAD[status], payload, metadata, true),

ethPersonalSetProvider: status => (payload, metadata) => action(actions.ETH_PERSONAL_SET_PROVIDER[status], payload, metadata, true),
 ethPersonalProviders: status => (payload, metadata) => action(actions.ETH_PERSONAL_PROVIDERS[status], payload, metadata, true),
 ethPersonalGivenProvider: status => (payload, metadata) => action(actions.ETH_PERSONAL_GIVEN_PROVIDER[status], payload, metadata, true),
 ethPersonalCurrentProvider: status => (payload, metadata) => action(actions.ETH_PERSONAL_CURRENT_PROVIDER[status], payload, metadata, true),
 ethPersonalNewAccount: status => (payload, metadata) => action(actions.ETH_PERSONAL_NEW_ACCOUNT[status], payload, metadata, true),
 ethPersonalSign: status => (payload, metadata) => action(actions.ETH_PERSONAL_SIGN[status], payload, metadata, true),
 ethPersonalEcRecover: status => (payload, metadata) => action(actions.ETH_PERSONAL_EC_RECOVER[status], payload, metadata, true),
 ethPersonalSignTransaction: status => (payload, metadata) => action(actions.ETH_PERSONAL_SIGN_TRANSACTION[status], payload, metadata, true),

ethIbanCreate: status => (payload, metadata) => action(actions.ETH_IBAN_CREATE[status], payload, metadata, true),
 ethIbanToAddress: status => (payload, metadata) => action(actions.ETH_IBAN_TO_ADDRESS[status], payload, metadata, true),
 ethIbanToIban: status => (payload, metadata) => action(actions.ETH_IBAN_TO_IBAN[status], payload, metadata, true),
 ethIbanFromEthereumAddress: status => (payload, metadata) => action(actions.ETH_IBAN_FROM_ETHEREUM_ADDRESS[status], payload, metadata, true),
 ethIbanFromIban: status => (payload, metadata) => action(actions.ETH_IBAN_FROM_IBAN[status], payload, metadata, true),
 ethIbanCreateIndirect: status => (payload, metadata) => action(actions.ETH_IBAN_CREATE_INDIRECT[status], payload, metadata, true),
 ethIbanIsValid: status => (payload, metadata) => action(actions.ETH_IBAN_IS_VALID[status], payload, metadata, true),
 ethIbanIsDirect: status => (payload, metadata) => action(actions.ETH_IBAN_IS_DIRECT[status], payload, metadata, true),

ethAbiEncodeFunctionSignature: status => (payload, metadata) => action(actions.ETH_ABI_ENCODE_FUNCTION_SIGNATURE[status], payload, metadata, true),
 ethAbiEncodeEventSignature: status => (payload, metadata) => action(actions.ETH_ABI_ENCODE_EVENT_SIGNATURE[status], payload, metadata, true),
 ethAbiEncodeParameter: status => (payload, metadata) => action(actions.ETH_ABI_ENCODE_PARAMETER[status], payload, metadata, true),
 ethAbiEncodeFunctionCall: status => (payload, metadata) => action(actions.ETH_ABI_ENCODE_FUNCTION_CALL[status], payload, metadata, true),
 ethAbiDecodeParameter: status => (payload, metadata) => action(actions.ETH_ABI_DECODE_PARAMETER[status], payload, metadata, true),
 ethAbiDecodeParameters: status => (payload, metadata) => action(actions.ETH_ABI_DECODE_PARAMETERS[status], payload, metadata, true),
 ethAbiDecodeLog: status => (payload, metadata) => action(actions.ETH_ABI_DECODE_LOG[status], payload, metadata, true),

netGetId: status => (payload, metadata) => action(actions.NET_GET_ID[status], payload, metadata, true),
 netIsListening: status => (payload, metadata) => action(actions.NET_IS_LISTENING[status], payload, metadata, true),
 netGetPeerCount: status => (payload, metadata) => action(actions.NET_GET_PEER_COUNT[status], payload, metadata, true),

}
export default actions

